accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
head(emplodata)
str(emplodata)
sum(is.na(emplodata))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- sample(1:nrow(emplodata), 0.8 * nrow(emplodata))
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
head(emplodata)
str(emplodata)
sum(is.na(emplodata))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- sample(1:nrow(emplodata), 0.8 * nrow(emplodata))
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
recall <- conf_matrix[["byClass"]][["Sensitivity"]]
cat("Recall:", recall, "\n")
precision <- conf_matrix[["byClass"]][["Pos Pred Value"]]
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
head(emplodata)
str(emplodata)
sum(is.na(emplodata))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- sample(1:nrow(emplodata), 0.8 * nrow(emplodata))
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
set.seed(1)
ctrl <- trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = multiClassSummary)
naive_bayes_model_cv <- train(employment_type ~ ., data = emplodata, method = "naive_bayes",
trControl = ctrl, preProcess = c("center", "scale"))
print(naive_bayes_model_cv)
cat("Cross-validated Accuracy:", naive_bayes_model_cv$results$Accuracy, "\n")
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
# Make predictions on the test set
predictions <- predict(naive_bayes_model, test_data)
# Generate confusion matrix
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
# Print confusion matrix
print(conf_matrix)
# Extract performance metrics
recall <- conf_matrix[["byClass"]][["Sensitivity"]]
# Extract performance metrics
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
# Print Recall, Precision, F-measure
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
View(conf_matrix)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
sum(is.na(emplodata))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata[is.na(emplodata)] <- mean(emplodata, na.rm = TRUE)
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- createDataPartition(emplodata$employment_type, p = 0.8 , list = FALSE)
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
set.seed(1)
ctrl <- trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = multiClassSummary)
naive_bayes_model_cv <- train(employment_type ~ ., data = emplodata, method = "naive_bayes",
trControl = ctrl, preProcess = c("center", "scale"))
print(naive_bayes_model_cv)
cat("Cross-validated Accuracy:", naive_bayes_model_cv$results$Accuracy, "\n")
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
sum(is.na(emplodata))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- createDataPartition(emplodata$employment_type, p = 0.8 , list = FALSE)
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
set.seed(1)
ctrl <- trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = multiClassSummary)
naive_bayes_model_cv <- train(employment_type ~ ., data = emplodata, method = "naive_bayes",
trControl = ctrl, preProcess = c("center", "scale"))
print(naive_bayes_model_cv)
cat("Cross-validated Accuracy:", naive_bayes_model_cv$results$Accuracy, "\n")
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
recall <- ifelse(is.na(conf_matrix$byClass["Sensitivity"]), 0, conf_matrix$byClass["Sensitivity"])
precision <- ifelse(is.na(conf_matrix$byClass["Pos Pred Value"]), 0, conf_matrix$byClass["Pos Pred Value"])
f_measure <- ifelse(is.na(2 * (precision * recall) / (precision + recall)), 0, 2 * (precision * recall) / (precision + recall))
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
recall <- ifelse(is.na(conf_matrix$byClass["Sensitivity"]), 0, conf_matrix$byClass["Sensitivity"])
precision <- ifelse(is.na(conf_matrix$byClass["Pos Pred Value"]), 0, conf_matrix$byClass["Pos Pred Value"])
# Check if both precision and recall are zero, set F-measure to 0, else calculate
if (precision == 0 && recall == 0) {
f_measure <- 0
} else {
f_measure <- 2 * (precision * recall) / (precision + recall)
}
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
table(test_data$employment_type)
table(predictions)
recall_PT <- ifelse(is.na(conf_matrix[4, "Sensitivity"]), 0, conf_matrix[4, "Sensitivity"])
recall_CT <- ifelse(is.na(conf_matrix[1, "Sensitivity"]), 0, conf_matrix[1, "Sensitivity"])
View(emplodata)
View(conf_matrix)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
sum(is.na(emplodata))
View(emplodata)
emplodata$employment_type <- as.factor(emplodata$salary_in_usd)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_in_usd <- as.factor(emplodata$salary_in_usd)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$salary_category <- cut(emplodata$salary, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(-Inf, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$salary_in_usd)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
library(pROC)
library(gains)
library(e1071)
library(caret)
library(klaR)
library(MLmetrics)
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
sum(is.na(emplodata))
unique_values <- sapply(emplodata,unique)
unique_values
View(unique_values)
View(emplodata)
emplodata$work_year_category <- cut(emplodata$work_year, breaks = c(0, 2020, 2021, 2022), labels = c("Low", "Medium", "High"))
emplodata$remote_ratio_category <- cut(emplodata$remote_ratio, breaks = c(0, 50, 100), labels = c("Low", "Medium", "High"))
emplodata$remote_ratio_category <- cut(emplodata$remote_ratio, breaks = c(0, 49,50, 100), labels = c("Low", "Medium", "High"))
emplodata$salary_category <- cut(emplodata$salary, breaks = c(0, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(0, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","remote_ratio","work_year","job_title","salary_currency","company_size","salary_in_usd","employee_residence","company_location")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- createDataPartition(emplodata$employment_type, p = 0.8 , list = FALSE)
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
set.seed(1)
ctrl <- trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = multiClassSummary)
naive_bayes_model_cv <- train(employment_type ~ ., data = emplodata, method = "naive_bayes",
trControl = ctrl, preProcess = c("center", "scale"))
recall <- ifelse(is.na(conf_matrix$byClass["Sensitivity"]), 0, conf_matrix$byClass["Sensitivity"])
precision <- ifelse(is.na(conf_matrix$byClass["Pos Pred Value"]), 0, conf_matrix$byClass["Pos Pred Value"])
# Check if both precision and recall are zero, set F-measure to 0, else calculate
if (precision == 0 && recall == 0) {
f_measure <- 0
} else {
f_measure <- 2 * (precision * recall) / (precision + recall)
}
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
file_path <- "C:/ds_salaries.csv"
emplodata <- read.csv(file_path, header = TRUE)
str(emplodata)
sum(is.na(emplodata))
unique_values <- sapply(emplodata,unique)
unique_values
emplodata$employment_type <- as.factor(emplodata$employment_type)
emplodata <- emplodata[, !colnames(emplodata) %in% "X"]
str(emplodata)
emplodata$work_year_category <- cut(emplodata$work_year, breaks = c(0, 2020, 2021, 2022), labels = c("Low", "Medium", "High"))
emplodata$remote_ratio_category <- cut(emplodata$remote_ratio, breaks = c(0, 49,50, 100), labels = c("Low", "Medium", "High"))
emplodata$salary_category <- cut(emplodata$salary, breaks = c(0, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
emplodata$salary_in_usd_category <- cut(emplodata$salary_in_usd, breaks = c(0, 50000, 400000, Inf), labels = c("Low", "Medium", "High"))
categorical_vars <- c("experience_level","work_year", "job_title", "employee_residence", "company_location", "company_size", "salary_currency","remote_ratio","salary_in_usd","salary","salary_in_usd_category","salary_category")
check_significance <- function(var) {
contingency_table <- table(emplodata[, var], emplodata$employment_type)
chi_square_result <- chisq.test(contingency_table)
p_value <- chi_square_result$p.value
significance_level <- 0.05
if (p_value <= significance_level) {
cat("The variable", var, "is significant (p-value =", p_value, ")\n")
} else {
cat("The variable", var, "is not significant (p-value =", p_value, ")\n")
emplodata <- emplodata[, !colnames(emplodata) %in% var]  # Remove non-significant variable
}
}
for (var in categorical_vars) {
check_significance(var)
}
str(emplodata)
columns_to_remove <- c("salary","work_year","salary_currency","company_size","salary_in_usd")
emplodata <- emplodata[, !colnames(emplodata) %in% columns_to_remove]
str(emplodata)
set.seed(1)
train_indices <- createDataPartition(emplodata$employment_type, p = 0.8 , list = FALSE)
train_data <- emplodata[train_indices, ]
test_data <- emplodata[-train_indices, ]
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
confusion_matrix <- table(predictions, test_data$employment_type)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
set.seed(1)
ctrl <- trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = multiClassSummary)
naive_bayes_model_cv <- train(employment_type ~ ., data = emplodata, method = "naive_bayes",
trControl = ctrl, preProcess = c("center", "scale"))
naive_bayes_model <- naiveBayes(employment_type ~ ., data = train_data)
predictions <- predict(naive_bayes_model, test_data)
conf_matrix <- confusionMatrix(predictions, test_data$employment_type)
print(conf_matrix)
recall <- ifelse(is.na(conf_matrix$byClass["Sensitivity"]), 0, conf_matrix$byClass["Sensitivity"])
precision <- ifelse(is.na(conf_matrix$byClass["Pos Pred Value"]), 0, conf_matrix$byClass["Pos Pred Value"])
# Check if both precision and recall are zero, set F-measure to 0, else calculate
if (precision == 0 && recall == 0) {
f_measure <- 0
} else {
f_measure <- 2 * (precision * recall) / (precision + recall)
}
cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
unique(new_train$job)
library(dplyr)
colnames(new_train)
colnames(new_test)
unique(new_train$job)
unique(new_train$marital)
unique(new_train$education)
unique(new_train$default)
unique(new_train$housing)
unique(new_train$loan)
unique(new_train$contact)
unique(new_train$month)
unique(new_train$day_of_week)
unique(new_train$poutcome)
new_train$job <- factor(new_train$job,
levels = c("blue-collar","entrepreneur","retired","admin.","student","services","technician","selfemployed","management","unemployed","unknown","housemaid"),
labels = c(1,2,3,4,5,6,7,8,9,10,11,12))
new_train$marital <- factor(new_train$marital,
levels = c("married","divorced","single","unknown"),
labels = c(1,2,3,4))
---
title: "R Notebook"
library(dplyr)
colnames(new_train)
